set nocompatible
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin
"工作目录
" cd D:\bluhuu\eai_web
let mapleader=";"

" ------------------------------------------------------------
let iCanHazVundle=1
let vundle_readme=expand('$HOME/vimfiles/bundle/Vundle.vim/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p vimfiles/bundle
    silent !git clone https://github.com/VundleVim/Vundle.vim.git vimfiles/bundle/Vundle.vim
    let iCanHazVundle=0
endif
filetype off                  " required
set rtp+=$HOME/vimfiles/bundle/Vundle.vim/
call vundle#begin('$HOME/vimfiles/bundle/')
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-scripts/L9'
Plugin 'w0rp/ale'
Plugin 'scrooloose/nerdtree'
Plugin 'yggdroot/indentline'
Plugin 'airblade/vim-gitgutter'
Plugin 'mattn/emmet-vim'
" Plugin 'Shutnik/jshint2.vim'
Plugin 'tyru/open-browser.vim'
Plugin 'leshill/vim-json'
Plugin 'ervandew/supertab'
"Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-git'
Plugin 'gregsexton/gitv'
Plugin 'marijnh/tern_for_vim'
Plugin 'Shougo/neocomplete.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tomtom/tcomment_vim'
Plugin 'kien/ctrlp.vim'
"Plugin 'vim-scripts/FuzzyFinder'
"Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'beautify-web/js-beautify'
Plugin 'majutsushi/tagbar'
Plugin 'jiangmiao/auto-pairs'
Plugin 'alvan/vim-closetag'
Plugin 'Mark'
Plugin 'ap/vim-css-color'
Plugin 'othree/csscomplete.vim'
Plugin 'ai/autoprefixer'
Plugin 'vim-autoprefixer'
Plugin 'godlygeek/tabular'
Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'easymotion/vim-easymotion'
Plugin 'dkprice/vim-easygrep'
Plugin 'pangloss/vim-javascript'
Plugin 'taglist.vim'
Plugin 'mbbill/undotree'
Plugin 'matze/vim-move'
Plugin 'vim-expand-region'
Plugin 'rking/ag.vim'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'gregsexton/matchtag'
Plugin 'othree/html5.vim'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
call vundle#end()            " required
filetype plugin indent on    " required
"-------------------------------------------------------------

" 编码设置
set fenc=utf-8 encoding=utf-8
language message utf-8
set fileencodings=ucs-bom,utf-8,utf-16,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set ffs=unix,dos ff=unix
set langmenu=zh_CN
let $LANG='zh_CN'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
set gfn=Bitstream\ Vera\ Sans\ Mono:h9 gfw=新宋体:h10
"窗口大小与位置
winpos 400 200
set cmdheight=1 lines=35 columns=120

set nolinebreak
set wrap                    "折行
set number                  "在每行前面显示行号
set so=1                    "光标上下两侧最少保留的屏幕行数
set sidescrolloff=1         "光标左右两侧保留的最少屏幕列数
set sidescroll=1            "水平滚动时滚动的最少列数
set makeprg=make            "":make" 命令使用的程序
set tabstop=4               "文件里的 <Tab> 代表的空格数
set softtabstop=4           "执行编辑操作，如插入 <Tab> 或者使用 <BS> 时，把 <Tab> 算作空格的数目
set expandtab               "插入模式里: 插入 <Tab> 时使用合适数量的空格
set shiftwidth=4            "缩进每一步使用的空白数目
set smarttab                "如果打开，行首的 <Tab> 根据 'shiftwidth' 插入空白
set fdc=2                   "如果非零，指定宽度的列在窗口的一侧显示，指示折叠的打开和关闭。最大值为12
set fdm=syntax              "当前窗口使用的折叠方式
syn on                      "开启高亮
compiler gcc

set guioptions-=T           "工具条
"set guioptions-=r          "右滚动条
set guioptions-=L
set guioptions+=e           "可用来改变标签文本
"set guioptions-=m          "菜单栏
set guioptions+=c           "简单的选择使用控制台对话框而不是弹出式对话框
set showtabline=1           "本选项的值指定何时显示带有标签页标签的行

"set cindent                "打开C类型的缩进
set autoindent              "自动缩进
set ruler                   "总是在右下角显示当前光标的行列信息
set showcmd                 "总是在右下角显示一个完整的命令已经完成的部分
set incsearch               "在键入字符串的同时开始搜索
set hlsearch                "高亮显示搜索的内容
"autocmd FileType text setlocal textwidth=7
set linespace=3             "字符之间插入的像素行数
set foldopen-=search        " don't open folds when you search into them
set foldopen-=undo          " don't open folds when you undo stuff
set foldlevel=99
set fsync
set laststatus=2            "本选项的值影响最后一个窗口何时有状态行

"set statusline=%t%r%h%w\ [%Y]\ [%{&ff}]\ [%{&fenc}:%{&enc}]\ [%05.5b-%04.4B]\ [%05.5l/%05.5L=%p%%]%<\ [%04.4c-%04.4v%04.4V]\ %{fugitive#statusline()}\

set nocursorline            "用 CursorLine |hl-CursorLine| 高亮光标所在的屏幕行
set nocursorcolumn          "用 CursorColumn |hl-CursorColumn| 高亮光标所在的屏幕列
set updatecount=819222      "输入这么多个字符以后，把交换文件写入磁盘
set undolevels=819222       "可以撤销的最大改变次数
set history=50              "设置冒号命令与搜索命令的命令历史列表的长度
"set nobackup                "没有备份
set backupext=.bak
set backupdir=c:\\temp
"set noundofile
set undodir=c:\\temp
set noswapfile
set autoread                " auto read when a file is changed outside

set sessionoptions+=unix,slash

set modelines=10            "如果 'modeline' 打开，'modelines' 给出检查 set 等命令的行数目
set modeline

syntax on

"highlight WhitespaceEOL ctermbg=red guibg=red
"match WhitespaceEOL /\s\+$/

" ------------------------------------------------------------
" NERDTree
" ------------------------------------------------------------
"NERDTree: autoload when startup vim
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"NERDTree: <leader>t to open NERDTree
map <leader>t :NERDTreeToggle<CR>

" NERDTree: File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

" ------------------------------------------------------------
"    vim-easymotion
" ------------------------------------------------------------
" " ref - https://github.com/easymotion/vim-easymotion

"" By Robin
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <leader>h <Plug>(easymotion-linebackward)
map <leader>l <Plug>(easymotion-lineforward)
map <leader>. <Plug>(easymotion-repeat)
nmap f <Plug>(easymotion-s)


" ----------------------------------------------------------------------------
" tern_for_vim
" ----------------------------------------------------------------------------
let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
autocmd FileType javascript setlocal omnifunc=tern#Complete

" ----------------------------------------------------------------------------
" neocomplete
" ----------------------------------------------------------------------------
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

colors molokai

"这个是安装字体后 必须设置此项"
let g:airline_powerline_fonts = 1

 "打开tabline功能,方便查看Buffer和切换，这个功能比较不错"
 "我还省去了minibufexpl插件，因为我习惯在1个Tab下用多个buffer"
 let g:airline#extensions#tabline#enabled = 1
 let g:airline#extensions#tabline#buffer_nr_show = 1
 " 关闭状态显示空白符号计数,这个对我用处不大"
 let g:airline#extensions#whitespace#enabled = 0
 let g:airline#extensions#whitespace#symbol = '!'

let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](node_modules|target|dist|extjs)|(\.(git|hg|svn|rvm|node_modules|DS_Storegit|optimized|compiled))$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
" Write this in your vimrc file
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
" You can disable this option too
" if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
"
" MapKey
"
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nnoremap <F5> :UndotreeToggle<cr>
nnoremap <C-S-Down> ddp
nnoremap <C-S-Up> ddP
"nnoremap <silent>w :exe ':silent !C:\Users\Administrator\AppData\Local\Google\Chrome\Application\chrome.exe %'<CR>
nnoremap <silent> <leader>w :!start C:\Users\Administrator\AppData\Local\Google\Chrome\Application\chrome.exe %:p<CR>
"   vim-jsbeautify
map <leader>b :call JsBeautify()<cr>
autocmd FileType javascript noremap <buffer>  <leader>b :call JsBeautify()<cr>
autocmd FileType json noremap <buffer> <leader>b :call JsonBeautify()<cr>
autocmd FileType jsx noremap <buffer> <leader>b :call JsxBeautify()<cr>
autocmd FileType html noremap <buffer> <leader>b :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <leader>b :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <leader>b :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <leader>b :call RangeJsonBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <leader>b :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <leader>b :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <leader>b :call RangeCSSBeautify()<cr>
nn <silent><F2> :exec("NERDTree ".expand('%:h'))<CR>
"   vim_markdown_preview
let vim_markdown_preview_hotkey='<C-m>'
let vim_markdown_preview_browser='Google Chrome'

